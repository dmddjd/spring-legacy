<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- @Transactional어노테이션 활성화 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 
		인터셉터(Interceptor)
		 - DispatcherServlet -> Controller로 보내는 요청을 가로채는 컴포넌트
		 - 공통 관심사(로그인체크, 권한,인가체크, 로깅 체크)등을 분리하여 관리
		 - 스프링의 빈 객체로 등록되어 기타 서비스, dao 객체를 의존성 주입 받을 수 있음
	 -->
	<interceptors>
		<interceptor>
			<mapping path="/board/update/**"/>
			<mapping path="/board/delete/**"/>
			<beans:bean class="com.kh.spring.common.interceptor.BoardOwnerCheckInterceptor" />
		</interceptor>
	</interceptors>	
	
	<!-- 
		AOP(Aspect Oriented Programming)
		 - 관점지향프로그래밍
		 - 핵심 비지니스 로직과는 별개로 여러 모듈에서 공통적으로 수행되어야 하는 로직들을 특정 관심사로 분리하여
		   핵심 로직에 영향을 주지 않고 모듈화 시키는 프로그래밍 기법.
		 - 예시) 서비스 메서드 실행 전,후로 로깅처리 , 예외처리하는 로직을 추가.
		 
		 aspectj-autoproxy
		  - Spring에서 AOP를 활성화 해주는 속성으로, @Aspect어노테이션을 통해 AOP클래스를 정의할 수 있다.
		  - Proxy객체를 생성하여 "대상 메서드" 실행 전/후에 공통 관심사를 삽입
		 
		 proxy-target-class속성
		  - 인터페이스를 구현한 클래스들(serviceImpl,daoImpl)에 대해서만 프록시를 적용하고자 할때 사용하는
		    속성
		  - true속성 : interface를 구현하지 않은 controller에 대해서도 프록시를 적용
		  - false : interface를 구현한 클래스에 대해서만 프록시를 적용
		  - Controller는 보통 AOP대상이 아니므로 프록시 대상에서 제외되는 것이 좋다.
		  
		  AOP VS Interceptor의 차이
		  - Interceptor : DispatcherServlet -> Controller사이에서 동작한다
		    -> 주로 인증/인가, 로깅, 인코딩처리에 활용
		  - AOP : Service/Repository등 비지니스 로직에서 동작(메서드 실행 전/후)
		    -> 트랜잭션 처리, 성능 체크, 보안체크 등 공통 소스코드 작성시 사용
		  
		  스프링 요청 / 응답 흐름
		  
		  클라이언트의 요청 -> Filter -> DispatcherServlet -> Interceptor -> Controller -> AOP -> Service
		  -> AOP -> DAO -> DB
	 -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	
	<!-- 웹소켓 설정 시작
		Http/Https
		 - 클라이언트와 웹서버 간에 요청과 응답기반으로 동작하는 전통적인 통신 방식.
		 - 클라이언트의 요청이 있어야만 응답이 발생하는 "단방향" 통신 구조
		 - 연결을 "유지하지 않고" 요청 시마다 새로운 연결을 생성. 실시간 처리기능을 개발하는게 어려움
		 - 구현방식이 단순하고, 범용적임.
		
		WebSocket
		 - 클라이언트와 서버 간의 지속적인 연결을 유지하며 , 양방향 통신을 지원하는 프토콜
		   양방향 통신 : 양쪽 장치가 동시에 송/수신을 독립적으로 할 수 있는 통신 방식
		 - 서버와 클라이언트가 서로 "실시간"으로 데이터를 주고 받을수 있고, 실시간 서비스개발에 
		   사용할 수 있다.
		 - 일반 http보다 구현이 복잡하고, 연결 수 유지에 따른 리소스 관리가 필요 
		 
		WebSocket사용을 위한 스펙
		 - HTML은 HTML5부터 Websocket지원
		 - Java에서는 java 7부터 지원
		 - Spring framework에서는 4.0이상부터 Websocket지원
		 - Spring 모듈 : spring-websocket, spring-messaging
		
		WebSocket의 동작방식
		 - 첫 연결 요청은 Http프로토콜을 사용하고, 연결 성공시 WebSocket통신으로 전환
		 - 연결되고 나서부터는 데이터프레임을 주고 받는다.
		
		SockJS
		 - WebSocket을 지원하지 않는 환경에서도 Websocket처럼 동작하게 해주는 자바스크립트 라이브러리
		 - WebSocket을 사용할수 없는 경우 xhr 스트리밍, polling방식을 통해 유사한 기능을 제공
		 - WebSocket의 하위호환성을 확보하기위한 라이브러리.
		 - WebSocket/Sockjs는 "메시지를 실시간으로 송수신 하기위한 양방향 채널"이며, 특별한 기능 규악은 존재하지 않는다.
		 
		 
	 -->
	 
	<beans:bean id="chatHandler" class="com.kh.spring.chat.model.websocket.ChatWebsocket" />
	 
	<websocket:handlers>
		<!-- 웹소켓 요청을 처리할수 있는 bean객체 등록 -->
		<websocket:mapping handler="chatHandler" path="/chat"/>
		
		<!-- 
			첫 웹소켈 연결 요청시 전달되는 HttpSession정보를 WebSocketSession으로 복사해주는
			입터셉터
		 -->
		<websocket:handshake-interceptors>
			<beans:bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor" />
		</websocket:handshake-interceptors>
		
		<!-- sockjs라이브러리를 이용하여 만들어진 웹소켓 객체 -->
		<websocket:sockjs></websocket:sockjs>
	</websocket:handlers>
	
	<!-- 
		STOMP
		 - WebSocket위에서 동작하는 메시징 프로토콜로 웹소켓을 활용한 복잡한 기능을 구현할 때 사용
		 - 메시지에 "목적지","구독","명령","헤더","바디"를 추가하여 의미있는 통신을 가능하게 한다.
		 - 이를 통해 구독/발행 기반 메시지 처리나 알림기능을 구현할 수 있다.
		 
		 stomp-endpoint
		  - stomp서버 연결 경로
		 
		 application-destination-prefix
		  - 클라이이언트가 "서버"로 보낼 메시지의 시작 url
		 
		 simple-broker
		  - 클라이언트가 메시지를 받을 구독 경로
	 -->
	 <websocket:message-broker application-destination-prefix="/app" >
	 	<websocket:stomp-endpoint path="/stomp">
	 		<websocket:sockjs></websocket:sockjs>
	 	</websocket:stomp-endpoint>
	 	<websocket:simple-broker prefix="/topic" />
	 </websocket:message-broker>
	 
	
	
	
	
	
	
	
	
	
	
	
	
</beans:beans>

