<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- @Transactional어노테이션 활성화 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 
		인터셉터(Interceptor)
		 - DispatcherServlet -> Controller로 보내는 요청을 가로채는 컴포넌트
		 - 공통 관심사(로그인체크, 권한,인가체크, 로깅 체크)등을 분리하여 관리
		 - 스프링의 빈 객체로 등록되어 기타 서비스, dao 객체를 의존성 주입 받을 수 있음
	 -->
	<interceptors>
		<interceptor>
			<mapping path="/board/update/**"/>
			<mapping path="/board/delete/**"/>
			<beans:bean class="com.kh.spring.common.interceptor.BoardOwnerCheckInterceptor" />
		</interceptor>
	</interceptors>	
	
	<!-- 
		AOP(Aspect Oriented Programming)
		 - 관점지향프로그래밍
		 - 핵심 비지니스 로직과는 별개로 여러 모듈에서 공통적으로 수행되어야 하는 로직들을 특정 관심사로 분리하여
		   핵심 로직에 영향을 주지 않고 모듈화 시키는 프로그래밍 기법.
		 - 예시) 서비스 메서드 실행 전,후로 로깅처리 , 예외처리하는 로직을 추가.
		 
		 aspectj-autoproxy
		  - Spring에서 AOP를 활성화 해주는 속성으로, @Aspect어노테이션을 통해 AOP클래스를 정의할 수 있다.
		  - Proxy객체를 생성하여 "대상 메서드" 실행 전/후에 공통 관심사를 삽입
		 
		 proxy-target-class속성
		  - 인터페이스를 구현한 클래스들(serviceImpl,daoImpl)에 대해서만 프록시를 적용하고자 할때 사용하는
		    속성
		  - true속성 : interface를 구현하지 않은 controller에 대해서도 프록시를 적용
		  - false : interface를 구현한 클래스에 대해서만 프록시를 적용
		  - Controller는 보통 AOP대상이 아니므로 프록시 대상에서 제외되는 것이 좋다.
		  
		  AOP VS Interceptor의 차이
		  - Interceptor : DispatcherServlet -> Controller사이에서 동작한다
		    -> 주로 인증/인가, 로깅, 인코딩처리에 활용
		  - AOP : Service/Repository등 비지니스 로직에서 동작(메서드 실행 전/후)
		    -> 트랜잭션 처리, 성능 체크, 보안체크 등 공통 소스코드 작성시 사용
		  
		  스프링 요청 / 응답 흐름
		  
		  클라이언트의 요청 -> Filter -> DispatcherServlet -> Interceptor -> Controller -> AOP -> Service
		  -> AOP -> DAO -> DB
	 -->
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	
	
	
	
	
	
	
	
</beans:beans>

